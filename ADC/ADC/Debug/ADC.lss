
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000312  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ef  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000784  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ee  00000000  00000000  00001d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a3  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b3  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00003112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8adc_initv>:

//initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX |= (1<<REFS0);
  6c:	3e 9a       	sbi	0x07, 6	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  6e:	87 e8       	ldi	r24, 0x87	; 135
  70:	86 b9       	out	0x06, r24	; 6
  72:	08 95       	ret

00000074 <_Z10analogReadh>:
	int result = 0;
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0x07;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8) | ch;     // clears the bottom 3 bits before ORing
  74:	97 b1       	in	r25, 0x07	; 7
  76:	98 7f       	andi	r25, 0xF8	; 248
  78:	87 70       	andi	r24, 0x07	; 7
  7a:	89 2b       	or	r24, r25
  7c:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  7e:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  80:	36 99       	sbic	0x06, 6	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <_Z10analogReadh+0xc>
	result = result | (ADCL) | (ADCH<<8);
  84:	84 b1       	in	r24, 0x04	; 4
  86:	25 b1       	in	r18, 0x05	; 5
	
	return (result);
  88:	90 e0       	ldi	r25, 0x00	; 0
}
  8a:	92 2b       	or	r25, r18
  8c:	08 95       	ret

0000008e <main>:

int main()
{
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	60 97       	sbiw	r28, 0x10	; 16
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
		D5 = data5;
		D6 = data6;
		D7 = data7;

		//make the lcd pins output
		lcd_DDR = lcd_DDR | (1<<RS) | (1<<E) | (1<<D4) | (1<<D5) | (1<<D6) | (1<<D7);
  a2:	84 b3       	in	r24, 0x14	; 20
  a4:	83 6f       	ori	r24, 0xF3	; 243
  a6:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	39 ef       	ldi	r19, 0xF9	; 249
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x2a>
  b8:	00 00       	nop
class lcd{
	private:
	int RS, E, D4, D5, D6, D7;
	void send_cmd(unsigned char cmd)
	{
		lcd_port = (lcd_port & 0x0F) | (cmd & 0xF0); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
  c0:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
  c2:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	95 e3       	ldi	r25, 0x35	; 53
  c6:	9a 95       	dec	r25
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x38>
  ca:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the Enable pin
  cc:	a9 98       	cbi	0x15, 1	; 21
  ce:	af e1       	ldi	r26, 0x1F	; 31
  d0:	b3 e0       	ldi	r27, 0x03	; 3
  d2:	11 97       	sbiw	r26, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x44>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x4a>
  d8:	00 00       	nop
		
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (cmd << 4); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
  e2:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
  e4:	a9 9a       	sbi	0x15, 1	; 21
  e6:	b5 e3       	ldi	r27, 0x35	; 53
  e8:	ba 95       	dec	r27
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x5a>
  ec:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the enable pin
  ee:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x66>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x6c>
  fa:	00 00       	nop
class lcd{
	private:
	int RS, E, D4, D5, D6, D7;
	void send_cmd(unsigned char cmd)
	{
		lcd_port = (lcd_port & 0x0F) | (cmd & 0xF0); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 104:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 106:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	95 e3       	ldi	r25, 0x35	; 53
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x7c>
 10e:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the Enable pin
 110:	a9 98       	cbi	0x15, 1	; 21
 112:	af e1       	ldi	r26, 0x1F	; 31
 114:	b3 e0       	ldi	r27, 0x03	; 3
 116:	11 97       	sbiw	r26, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x88>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8e>
 11c:	00 00       	nop
		
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (cmd << 4); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	80 68       	ori	r24, 0x80	; 128
 124:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 126:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 128:	a9 9a       	sbi	0x15, 1	; 21
 12a:	b5 e3       	ldi	r27, 0x35	; 53
 12c:	ba 95       	dec	r27
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x9e>
 130:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the enable pin
 132:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xaa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xb0>
 13e:	00 00       	nop
class lcd{
	private:
	int RS, E, D4, D5, D6, D7;
	void send_cmd(unsigned char cmd)
	{
		lcd_port = (lcd_port & 0x0F) | (cmd & 0xF0); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 140:	85 b3       	in	r24, 0x15	; 21
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 146:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 148:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	95 e3       	ldi	r25, 0x35	; 53
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0xbe>
 150:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the Enable pin
 152:	a9 98       	cbi	0x15, 1	; 21
 154:	af e1       	ldi	r26, 0x1F	; 31
 156:	b3 e0       	ldi	r27, 0x03	; 3
 158:	11 97       	sbiw	r26, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xca>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xd0>
 15e:	00 00       	nop
		
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (cmd << 4); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 160:	85 b3       	in	r24, 0x15	; 21
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 6c       	ori	r24, 0xC0	; 192
 166:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 168:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 16a:	a9 9a       	sbi	0x15, 1	; 21
 16c:	b5 e3       	ldi	r27, 0x35	; 53
 16e:	ba 95       	dec	r27
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xe0>
 172:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the enable pin
 174:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xec>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xf2>
 180:	00 00       	nop
class lcd{
	private:
	int RS, E, D4, D5, D6, D7;
	void send_cmd(unsigned char cmd)
	{
		lcd_port = (lcd_port & 0x0F) | (cmd & 0xF0); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 182:	85 b3       	in	r24, 0x15	; 21
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 188:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 18a:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	95 e3       	ldi	r25, 0x35	; 53
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x100>
 192:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the Enable pin
 194:	a9 98       	cbi	0x15, 1	; 21
 196:	af e1       	ldi	r26, 0x1F	; 31
 198:	b3 e0       	ldi	r27, 0x03	; 3
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x10c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x112>
 1a0:	00 00       	nop
		
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (cmd << 4); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 1a2:	85 b3       	in	r24, 0x15	; 21
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 1aa:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 1ac:	a9 9a       	sbi	0x15, 1	; 21
 1ae:	b5 e3       	ldi	r27, 0x35	; 53
 1b0:	ba 95       	dec	r27
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x122>
 1b4:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the enable pin
 1b6:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x12e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x134>
 1c2:	00 00       	nop
	int adc_result;
	
	lcd myLCD(0,1,4,5,6,7);
	//initialize adc and lcd
	adc_init();
 1c4:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8adc_initv>
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	a0 e7       	ldi	r26, 0x70	; 112
 1cc:	b2 e0       	ldi	r27, 0x02	; 2
 1ce:	91 50       	subi	r25, 0x01	; 1
 1d0:	a0 40       	sbci	r26, 0x00	; 0
 1d2:	b0 40       	sbci	r27, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x140>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x14a>
 1d8:	00 00       	nop
	
	_delay_ms(50);
	
	while(1)
	{
		adc_result = analogRead(0);      // read adc value at PA0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 3a 00 	call	0x74	; 0x74 <_Z10analogReadh>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1e0:	4a e0       	ldi	r20, 0x0A	; 10
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__itoa_ncheck>
		_delay_ms(5);
	}
	void print(char *str)
	{
		int i;
		for(i=0;str[i]!=0;i++)		// Send each char of string till the NULL
 1ec:	99 81       	ldd	r25, Y+1	; 0x01
 1ee:	99 23       	and	r25, r25
 1f0:	71 f1       	breq	.+92     	; 0x24e <main+0x1c0>
 1f2:	fe 01       	movw	r30, r28
 1f4:	32 96       	adiw	r30, 0x02	; 2
		send_cmd(0x01); // Clear Display
	}
	
	void printCh(unsigned char str)
	{
		lcd_port = (lcd_port & 0x0F) | (str & 0xF0); // Sending upper nibble
 1f6:	85 b3       	in	r24, 0x15	; 21
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	29 2f       	mov	r18, r25
 1fc:	20 7f       	andi	r18, 0xF0	; 240
 1fe:	82 2b       	or	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
		lcd_port |= (1<<RS);  // RS=1, data reg.
 202:	a8 9a       	sbi	0x15, 0	; 21
		lcd_port|= (1<<E); //turn on the enable pin
 204:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	25 e0       	ldi	r18, 0x05	; 5
 208:	2a 95       	dec	r18
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x17a>
 20c:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<E); //turn off the enable pin
 20e:	a9 98       	cbi	0x15, 1	; 21
 210:	af e1       	ldi	r26, 0x1F	; 31
 212:	b3 e0       	ldi	r27, 0x03	; 3
 214:	11 97       	sbiw	r26, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x186>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x18c>
 21a:	00 00       	nop
		_delay_us(200);
		
		lcd_port = (lcd_port & 0x0F) | (str <<4); // Sending upper nibble
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	28 2f       	mov	r18, r24
 220:	2f 70       	andi	r18, 0x0F	; 15
 222:	b0 e1       	ldi	r27, 0x10	; 16
 224:	9b 9f       	mul	r25, r27
 226:	c0 01       	movw	r24, r0
 228:	11 24       	eor	r1, r1
 22a:	82 2b       	or	r24, r18
 22c:	85 bb       	out	0x15, r24	; 21
		lcd_port |= (1<<RS);  // RS=1, data reg.
 22e:	a8 9a       	sbi	0x15, 0	; 21
		lcd_port|= (1<<E); //turn on the enable pin
 230:	a9 9a       	sbi	0x15, 1	; 21
 232:	25 e0       	ldi	r18, 0x05	; 5
 234:	2a 95       	dec	r18
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x1a6>
 238:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<E); //turn off the enable pin
 23a:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	9e e4       	ldi	r25, 0x4E	; 78
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x1b2>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x1b8>
 246:	00 00       	nop
		_delay_ms(5);
	}
	void print(char *str)
	{
		int i;
		for(i=0;str[i]!=0;i++)		// Send each char of string till the NULL
 248:	91 91       	ld	r25, Z+
 24a:	91 11       	cpse	r25, r1
 24c:	d4 cf       	rjmp	.-88     	; 0x1f6 <main+0x168>
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	a7 ea       	ldi	r26, 0xA7	; 167
 252:	b1 e6       	ldi	r27, 0x61	; 97
 254:	91 50       	subi	r25, 0x01	; 1
 256:	a0 40       	sbci	r26, 0x00	; 0
 258:	b0 40       	sbci	r27, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1c6>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1d0>
 25e:	00 00       	nop
class lcd{
	private:
	int RS, E, D4, D5, D6, D7;
	void send_cmd(unsigned char cmd)
	{
		lcd_port = (lcd_port & 0x0F) | (cmd & 0xF0); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 260:	85 b3       	in	r24, 0x15	; 21
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 266:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 268:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	25 e3       	ldi	r18, 0x35	; 53
 26c:	2a 95       	dec	r18
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x1de>
 270:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the Enable pin
 272:	a9 98       	cbi	0x15, 1	; 21
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x1ea>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x1f0>
 27e:	00 00       	nop
		
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (cmd << 4); //sending the higher nibble of the cmd to the last 4 pins of lcd_port
 280:	85 b3       	in	r24, 0x15	; 21
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	80 61       	ori	r24, 0x10	; 16
 286:	85 bb       	out	0x15, r24	; 21
		lcd_port &= ~(1<<RS); //command register select (0)
 288:	a8 98       	cbi	0x15, 0	; 21
		lcd_port |= (1<<E); //making enable pin high, ready for receiving data
 28a:	a9 9a       	sbi	0x15, 1	; 21
 28c:	95 e3       	ldi	r25, 0x35	; 53
 28e:	9a 95       	dec	r25
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x200>
 292:	00 00       	nop
		_delay_us(10);
		lcd_port &= ~(1<<E); //turning off the enable pin
 294:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	af e1       	ldi	r26, 0x1F	; 31
 298:	be e4       	ldi	r27, 0x4E	; 78
 29a:	11 97       	sbiw	r26, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x20c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x212>
 2a0:	00 00       	nop
 2a2:	9b cf       	rjmp	.-202    	; 0x1da <main+0x14c>

000002a4 <__itoa_ncheck>:
 2a4:	bb 27       	eor	r27, r27
 2a6:	4a 30       	cpi	r20, 0x0A	; 10
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <__itoa_ncheck+0x12>
 2aa:	99 23       	and	r25, r25
 2ac:	22 f4       	brpl	.+8      	; 0x2b6 <__itoa_ncheck+0x12>
 2ae:	bd e2       	ldi	r27, 0x2D	; 45
 2b0:	90 95       	com	r25
 2b2:	81 95       	neg	r24
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__utoa_common>

000002ba <__utoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27

000002bc <__utoa_common>:
 2bc:	fb 01       	movw	r30, r22
 2be:	55 27       	eor	r21, r21
 2c0:	aa 27       	eor	r26, r26
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	aa 1f       	adc	r26, r26
 2c8:	a4 17       	cp	r26, r20
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__utoa_common+0x14>
 2cc:	a4 1b       	sub	r26, r20
 2ce:	83 95       	inc	r24
 2d0:	50 51       	subi	r21, 0x10	; 16
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <__utoa_common+0x6>
 2d4:	a0 5d       	subi	r26, 0xD0	; 208
 2d6:	aa 33       	cpi	r26, 0x3A	; 58
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <__utoa_common+0x20>
 2da:	a9 5d       	subi	r26, 0xD9	; 217
 2dc:	a1 93       	st	Z+, r26
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	79 f7       	brne	.-34     	; 0x2c0 <__utoa_common+0x4>
 2e2:	b1 11       	cpse	r27, r1
 2e4:	b1 93       	st	Z+, r27
 2e6:	11 92       	st	Z+, r1
 2e8:	cb 01       	movw	r24, r22
 2ea:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <strrev>

000002ee <strrev>:
 2ee:	dc 01       	movw	r26, r24
 2f0:	fc 01       	movw	r30, r24
 2f2:	67 2f       	mov	r22, r23
 2f4:	71 91       	ld	r23, Z+
 2f6:	77 23       	and	r23, r23
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <strrev+0x4>
 2fa:	32 97       	sbiw	r30, 0x02	; 2
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <strrev+0x18>
 2fe:	7c 91       	ld	r23, X
 300:	6d 93       	st	X+, r22
 302:	70 83       	st	Z, r23
 304:	62 91       	ld	r22, -Z
 306:	ae 17       	cp	r26, r30
 308:	bf 07       	cpc	r27, r31
 30a:	c8 f3       	brcs	.-14     	; 0x2fe <strrev+0x10>
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
